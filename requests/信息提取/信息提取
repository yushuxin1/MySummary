1  HTML的信息标记
    HTML是WWW的信息组织方式     将声音、图像、视频等超文本的信息嵌入到文本中
    HTML通过预定义的<>...</>标签形式组织不同类型的信息
2  信息标记的三种形式：
    XML           已标签为主，并伴有属性和注释
    JSON          有类型的键值对key:value
    YAML          无类型的键值对key:value     |表达整块数据 # 表示注释
3  三种信息形式的比较：
    XML：
        <person>
            <firstName>Tian</firstName>
            <lastName>Song</lastName>
            <address>
                <streetAddr>中关村南大街5号</streetAddr>
                <city>北京市</city>
                <zipcode>100081</zipcode>
            </address>
            <prof>Computer System</prof><prof>Security</prof>
        </person>
    JSON：
        {
            "firstName": "Tian",
            "lastName" : "Song",
            "address"  : {
                            "streetAddr": "中关村南大街5号",
                            "city": "北京市",
                            "zipcode": "100081"
                         },
            "prof"     : ["Computer System", "Security"]
        }
    YAML：
        firstName: Tain
        lastName : Song
        address  :
            streetAddr: 中关村南大街5号
            city      : 北京市
            zipcode   : 100081
        prof     :
        -Computer System
        -Security
4  三种信息标记形式的比较
    XML        Internet上的信息交互与传递
    JSON       移动应用云端和节点的信息通信，无注释
    YAML       各类系统的配置文件，有注释易读
5  信息提取的一般方法
    方法一： 完整解析信息的标记形式，再提取关键信息。
        XML JSON YAML
            需要标记解析器  例如：bs4库的标签树遍历
        优点：信息解析准确
        缺点：提取过程繁琐，速度慢
    方法二：无视标记形式，直接搜索关键信息。
        搜索
            对信息的文本查找函数即可
        优点：提取过程简洁，速度较快
        缺点：提取结果准确性与信息内容相关
    融合方法：结合形式解析与搜索方法，提取关键信息
        XML  JSON  YAML  搜索
        需要标记解析器及文本查找函数

    实例：
        提取HTML中所有URL链接
            思路： 1) 搜索到所有<a>标签
                        soup.find_all('a')
                  2) 解析<a>标签格式，提取href后的链接内容
6  bs4库的信息提取
    <>.find_all(name, attrs, recursive, string, **kwargs)
        返回一个列表类型，存储查找的结果
        name：对标签名称的检索字符串
        attrs：对标签属性值的检索字符串，可标注属性检索
        recursive：是否对子孙全部检索，默认True
        string：<>...</>中字符串区域的检索字符串

        查找attrs=course的p标签：
            soup.find_all('p', 'course')
        查找id=link1的标签：
            soup.find_all(id='link1')

    <tag>(..) 等价于 <tag>.find_all(..)
    soup(..)  等价于 soup.find_all(..)
7  bs4的常用扩展方法：
    <>.find()                       搜索且返回一个结果，字符串类型，同.find_all()参数
    <>.find_parents()               在先辈节点中搜索，返回列表类型，同.find_all()参数
    <>.find_parent()                在先辈节点中返回一个结果，字符串类型，同.find()参数
    <>.find_next_siblings()         在后续平行节点中搜索，返回列表类型，同.find_all()参数
    <>.find_next_sibling()          在后续平行节点中返回一个结果，字符串类型，同.find()参数
    <>.find_previous_siblings()     在前序平行节点中搜索，返回列表类型，同.find_all()参数
    <>.find_previous_sibling()      在前序平行节点中返回一个结果，字符串类型，同.find()参数
8  中文对齐问题的原因    .format函数
       :         <填充>              <对齐>                <宽度>                      ,                              <精度>                             <类型>
    引导符号  用于填充的单个字符  <左对齐;>右对齐;^居中对齐   槽的设定输出宽度   数字的千位分隔符,适用于整数和浮点数   浮点数小数部分的精度或字符串的最大长度   整数类型b,c,d,o,x,X;浮点数类型e,E,f,%

    当中文字符宽度不够时,采用西文字符填充;中西文字符占用宽度不同
9  中文对齐问题的解决
    采用中文字符的空格填充chr(12288)